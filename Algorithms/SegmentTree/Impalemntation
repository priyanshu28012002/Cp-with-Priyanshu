#include <bits/stdc++.h>
using namespace std;

#define int long long int
#define ll long long
#define rep(i, x, n) for (int i = x; i < n; i++)
#define in(x) int x; cin >> x
#define inputArr(arr,n) int arr[n]; rep(i,0,n) cin >> arr[i]
#define inputVec(v,n)  vector<int> v; rep(i,0,n) {int vectorValueforInput; cin >> vectorValueforInput; v.push_back(vectorValueforInput);}
#define inputString(s) string s ; cin>>s
#define sortarr sort(arr,arr+n)
#define sortav sort(v.begin(),v.end())

void systemAndOnlineJudge() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    #ifndef ONLINE_JUDGE
        freopen("inputf.in", "r", stdin);
        freopen("outputf.in", "w", stdout);
    #endif
}

// my segment tree in 0-indexed
class SGTree {
private:
    vector<int> seg;
    
public:
    SGTree(int n) {
        seg.resize(4 * n + 1);
    }


    int query(int ind, int low, int high, int r, int l) {
                                        // if max->   INT_MIN
                                        // min -> INT_MAX
                                        // sum -> 0;
                                        // product -> 1   
        if (r > high || l < low) return INT_MIN; // no overlap 
        if (low >= r && high <= l) return seg[ind]; // complete overlap
        
        int mid = (low + high) / 2;
        int left = query(2 * ind + 1, low, mid, r, l); // left child
        int right = query(2 * ind + 2, mid + 1, high, r, l); // right child
        return max(left, right);  // max
      // return min(left, right); // min
      // return (left+right);     //sum
      // return (left*right);     //product   // partial overlap
    }

    void build(int ind, int low, int high, int arr[]) {
        if (low == high) {
            seg[ind] = arr[low];
            return;
        }
        int mid = (low + high) / 2;
        build(2 * ind + 1, low, mid, arr);
        build(2 * ind + 2, mid + 1, high, arr);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
        // min
        // sum
        // product
    }

    void update(int ind, int low, int high, int i, int val) {
        if (low == high) {
            seg[ind] = val;
            return;
        }
        int mid = (low + high) / 2;
        if (i <= mid) {
            update(2 * ind + 1, low, mid, i, val);
        } else {
            update(2 * ind + 2, mid + 1, high, i, val);
        }
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
        // min
        // sum
        // product
    }

    void updateRange(int ind, int low, int high, int l, int r, int val) {
        if (low > r || high < l) return; // no overlap

        if (low == high) {
            seg[ind] = val;
            return;
        }

        int mid = (low + high) / 2;
        updateRange(2 * ind + 1, low, mid, l, r, val); // left child
        updateRange(2 * ind + 2, mid + 1, high, l, r, val); // right child
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
        // min
        // sum
        // product
    }
};

void problemSolve(){
    int n, q;
    cin >> n >> q;
    int arr[n];
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
    SGTree seg1(n);
    seg1.build(0, 0, n - 1, arr);

    while (q--) {
        int type;
        cin >> type;
      
        if (type == 1) {
            int a, b;
            cin >> a >> b;
            a--;
            b--;
            cout << "Min of range " << a << " " << b << " " << seg1.query(0, 0, n - 1, a, b) << endl;
        } else if (type == 2) {
            int i, val;
            cin >> i >> val;
            i--;
            seg1.update(0, 0, n - 1, i, val);
        } else if (type == 3) {
            int l, r, val;
            cin >> l >> r >> val;
            l--;
            r--;
            seg1.updateRange(0, 0, n - 1, l, r, val);
        }
    }
}



int32_t main() {
    systemAndOnlineJudge();
    problemSolve(); // no test case
    //in(t);
    //while(t--){
    //problemSolve();
    //}
    return 0;
}



